`  执行上下文类型
  1. 全局执行上下文:
    任何不在函数内部的都是全局执行上下文，一个程序中只有一个全局执行上下文
  2. 函数执行上下文
    当一个函数被调用时，就会为该函数创建一个新的执行上下文，可以有任意多个
  3. eval 函数执行上下文
    执行 eval 函数中的代码也会有属于自己的执行上下文
`

`  执行上下文栈
  1. JavaScript 引擎使用执行上下文栈来管理执行上下文
  2. JavaScript 代码执行时，首先遇到全局代码，会创建一个全局执行上下文，并压入执行栈。
  每当遇到一个函数调用，就会为该函数创建一个新的执行上下文，并压入栈顶。
  引擎会执行位于执行上下文栈顶的函数，当函数执行完成后，执行上下文从栈顶弹出，执行下一个上下文。
  当所有代码都执行完毕后，从栈中弹出全局执行上下文。
`



console.log(1111);

function fn1() {
  console.log('fn1');
  fn3()
}

function fn2() {
  console.log('fn2');
}

function fn3() {
  console.log('fn3')
}

fn1()
fn2()


`  创建执行上下文
  1. 创建阶段
    1. this绑定:  在全局执行上下文中，this指向window 
                  在函数执行上下文中，this取决于函数如何调用，否则就是window或undefined
    2. 创建词法环境: 创建  标识符---变量映射  的数据结构
                  环境记录器:用来存储变量在函数声明的实际位置
                  外部环境的引用: 访问父级作用域
    3. 创建变量环境: 变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。

  2. 执行阶段 : 变量分配，执行代码
`

` 在创建阶段的变量声明提升 提升通过 （var创建的变量）  和 （function声明的函数）
  1. 先提升 变量=undefined   再提升function    （同名的function 会将 变量给覆盖掉）
  2. function 提升后可直接使用
`